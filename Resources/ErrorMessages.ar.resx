<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CancelOrderNotAllowed" xml:space="preserve">
    <value>[AR] Order {0} not allowed to be cancelled.</value>
  </data>
  <data name="CannotDeleteStore" xml:space="preserve">
    <value>[AR] Cannot Delete Store</value>
  </data>
  <data name="DatabaseError" xml:space="preserve">
    <value>[AR] Database error: [{0}] {1}.</value>
  </data>
  <data name="DeliveryError" xml:space="preserve">
    <value>[AR] Delivery error: [{0}] {1}.</value>
  </data>
  <data name="DeliveryUnknown" xml:space="preserve">
    <value>[AR] Delivery error.</value>
  </data>
  <data name="Duplicate Store" xml:space="preserve">
    <value>[AR] Duplicate Store</value>
  </data>
  <data name="EmptyCart" xml:space="preserve">
    <value>[AR] Cart is empty.</value>
  </data>
  <data name="EntityNotFound" xml:space="preserve">
    <value>[AR] {0} not found: {1}.</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>[AR] Unknown error: [{0}] {1}.</value>
  </data>
  <data name="ExchangeAlreadyExist" xml:space="preserve">
    <value>[AR] Exchange already exist: {0}.</value>
  </data>
  <data name="FileAlreadyExist" xml:space="preserve">
    <value>[AR] File already exist: {0}.</value>
  </data>
  <data name="Forbidden" xml:space="preserve">
    <value>[AR] Forbidden: {0}.</value>
  </data>
  <data name="InvalidExchangeQuantity" xml:space="preserve">
    <value>[AR] Exchange {0} quantity must be less than or equal to {1}.</value>
  </data>
  <data name="InvalidOtp" xml:space="preserve">
    <value>[AR] Invalid OTP.</value>
  </data>
  <data name="InvalidPassword" xml:space="preserve">
    <value>[AR] Invalid password.</value>
  </data>
  <data name="InvalidPurchaseQuoteConfirmedQuantity" xml:space="preserve">
    <value>[AR] Purchase quote {0} quantity must be equal to {1} or {2}.</value>
  </data>
  <data name="InvalidRefundQuantity" xml:space="preserve">
    <value>[AR] Refund {0} quantity must be less than or equal to {1}.</value>
  </data>
  <data name="InvalidStateChange" xml:space="preserve">
    <value>[AR] Invalid state change from {0} to {1}.</value>
  </data>
  <data name="InvalidToken" xml:space="preserve">
    <value>[AR] Invalid token.</value>
  </data>
  <data name="MailError" xml:space="preserve">
    <value>[AR] Mail error: [{0}] {1}.</value>
    <comment/>
  </data>
  <data name="MailUnknown" xml:space="preserve">
    <value>[AR] Mail error.</value>
  </data>
  <data name="OtpError" xml:space="preserve">
    <value>[AR] OTP error: [{0}] {1}.</value>
  </data>
  <data name="OtpExpired" xml:space="preserve">
    <value>[AR] OTP expired.</value>
  </data>
  <data name="OtpMaxAttempt" xml:space="preserve">
    <value>[AR] Too many OTP attempts, please try again later.</value>
  </data>
  <data name="OtpUnknown" xml:space="preserve">
    <value>[AR] OTP error.</value>
  </data>
  <data name="PathNotFound" xml:space="preserve">
    <value>[AR] Path not found: {0}.</value>
  </data>
  <data name="PaymentError" xml:space="preserve">
    <value>[AR] Payment error: [{0}] {1}.</value>
  </data>
  <data name="PaymentHashMismatch" xml:space="preserve">
    <value>[AR] Payment hash not match.</value>
  </data>
  <data name="PaymentUnknown" xml:space="preserve">
    <value>[AR] Payment error.</value>
  </data>
  <data name="PrincipalNotAllowed" xml:space="preserve">
    <value>[AR] Principal not allowed.</value>
  </data>
  <data name="PrincipalTypeNotAllowed" xml:space="preserve">
    <value>[AR] Principal type not allowed: {0}.</value>
  </data>
  <data name="ProductMismatch" xml:space="preserve">
    <value>[AR] Product not match: {0}, expected: {1}.</value>
  </data>
  <data name="RecursiveParent" xml:space="preserve">
    <value>[AR] Cannot assign same ID as parent: {0}.</value>
  </data>
  <data name="RefundAlreadyExist" xml:space="preserve">
    <value>[AR] Refund already exist: {0}.</value>
  </data>
  <data name="ReviewSubmitted" xml:space="preserve">
    <value>[AR] Review already submitted.</value>
  </data>
  <data name="SaleItemOutOfStock" xml:space="preserve">
    <value>[AR] Product {0} out of stock, available: {1}.</value>
  </data>
  <data name="SaleItemPriceMismatch" xml:space="preserve">
    <value>[AR] Price not match: {0}, expected: {1}.</value>
  </data>
  <data name="StateNotAllowed" xml:space="preserve">
    <value>[AR] State not allowed: {0}.</value>
  </data>
  <data name="TokenExpired" xml:space="preserve">
    <value>[AR] Token expired.</value>
  </data>
  <data name="Unauthorized" xml:space="preserve">
    <value>[AR] Unauthorized: {0}.</value>
  </data>
  <data name="UniqueConstraintViolation" xml:space="preserve">
    <value>[AR] Value already exist: {0}.</value>
  </data>
  <data name="Unknown" xml:space="preserve">
    <value>[AR] Unknown error.</value>
  </data>
  <data name="UrlShortenerError" xml:space="preserve">
    <value>[AR] Url shortener error: [{0}] {1}.</value>
  </data>
  <data name="UrlShortenerUnknown" xml:space="preserve">
    <value>[AR] Url shortener error.</value>
  </data>
  <data name="UsernameAlreadyExist" xml:space="preserve">
    <value>[AR] Username already exist: {0}.</value>
  </data>
  <data name="UsernameAndPasswordNotFound" xml:space="preserve">
    <value>[AR] Username and password not found.</value>
  </data>
  <data name="UserNotActive" xml:space="preserve">
    <value>[AR] User not active.</value>
  </data>
  <data name="Validation" xml:space="preserve">
    <value>[AR] Validation error.</value>
  </data>
</root>